@* Views/Job/Create.cshtml *@
@model EShiftSystem.ViewModels.JobCreateViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    ViewData["Title"] = "Create New Job";
    // We get the SelectList from the ViewBag set in the controller
    var transportUnits = ViewBag.TransportUnits as SelectList;
}

<h1>@ViewData["Title"]</h1>
<hr />

<form asp-action="Create" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    @* SECTION 1: JOB DETAILS *@
    <div class="row">
        <div class="col-md-6">
            <h4>Job Details</h4>
            <div class="form-group mb-3">
                <label asp-for="JobTitle" class="control-label"></label>
                <input asp-for="JobTitle" class="form-control" />
                <span asp-validation-for="JobTitle" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="JobDate" class="control-label"></label>
                <input asp-for="JobDate" type="date" class="form-control" />
                <span asp-validation-for="JobDate" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <h4>&nbsp;</h4>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Priority" class="control-label"></label>
                <select asp-for="Priority" asp-items="Html.GetEnumSelectList<EShiftSystem.Models.Enums.JobPriority>()" class="form-control"></select>
                <span asp-validation-for="Priority" class="text-danger"></span>
            </div>
        </div>
    </div>

    <hr />

    @* SECTION 2: DYNAMIC LOADS *@
    <h4>Loads</h4>
    <div id="loads-container">
        @for (var i = 0; i < Model.Loads.Count; i++)
        {
            <div class="card mb-3 load-entry">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="load-title mb-0">Load #@(i + 1)</h5>
                    <button type="button" class="btn btn-sm btn-danger remove-load-btn">Remove Load</button>
                </div>
                <div class="card-body">
                    @* --- Load Details --- *@
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label asp-for="Loads[i].StartLocation" class="control-label"></label>
                                <input asp-for="Loads[i].StartLocation" class="form-control" />
                                <span asp-validation-for="Loads[i].StartLocation" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label asp-for="Loads[i].Destination" class="control-label"></label>
                                <input asp-for="Loads[i].Destination" class="form-control" />
                                <span asp-validation-for="Loads[i].Destination" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Loads[i].TransportUnitId" class="control-label"></label>
                        @* Using the ViewBag.TransportUnits directly here *@
                        <select asp-for="Loads[i].TransportUnitId" asp-items="transportUnits" class="form-control">
                            <option value="">-- Select Transport Unit --</option>
                        </select>
                        <span asp-validation-for="Loads[i].TransportUnitId" class="text-danger"></span>
                    </div>

                    <hr>

                    @* --- NESTED DYNAMIC PRODUCTS for this load --- *@
                    <h6>Products in this Load</h6>
                    <div class="products-container" data-load-index="@i">
                        @for (var j = 0; j < Model.Loads[i].Products.Count; j++)
                        {
                            <div class="row product-entry mb-2 align-items-center">
                                <div class="col-md-5">
                                    <label asp-for="Loads[i].Products[j].Name"></label>
                                    <input asp-for="Loads[i].Products[j].Name" class="form-control" />
                                    <span asp-validation-for="Loads[i].Products[j].Name" class="text-danger"></span>
                                </div>
                                <div class="col-md-3">
                                    <label asp-for="Loads[i].Products[j].Quantity"></label>
                                    <input asp-for="Loads[i].Products[j].Quantity" class="form-control" type="number" />
                                    <span asp-validation-for="Loads[i].Products[j].Quantity" class="text-danger"></span>
                                </div>
                                <div class="col-md-3">
                                    <label asp-for="Loads[i].Products[j].Weight"></label>
                                    <input asp-for="Loads[i].Products[j].Weight" class="form-control" type="number" />
                                    <span asp-validation-for="Loads[i].Products[j].Weight" class="text-danger"></span>
                                </div>
                                <div class="col-md-1">
                                    <label>&nbsp;</label>
                                    <button type="button" class="btn btn-sm btn-outline-danger remove-product-btn">X</button>
                                </div>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-sm btn-info add-product-btn mt-2">Add Product to this Load</button>
                </div>
            </div>
        }
    </div>
    <div class="my-3">
        <button id="add-load-btn" type="button" class="btn btn-secondary">Add Another Load</button>
    </div>

    <hr />

    @* SECTION 3: FINAL SUBMISSION *@
    <div class="form-group">
        <input type="submit" value="Submit Entire Job" class="btn btn-primary btn-lg" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {

            // Generate the <option> tags for Transport Units once on the server.
            // This will create a string of HTML like:
            // '<option value="1">Truck</option><option value="2">Van</option>' etc.
            var transportUnitsOptionsHtml = '';
            @if (transportUnits != null)
            {
                    foreach (var item in transportUnits)
                    {
                            @:transportUnitsOptionsHtml += '<option value="@item.Value">@Html.Raw(item.Text)</option>';
                    }
            }


            // --- RE-INDEXING ---
            function reindexAll() {
                $('.load-entry').each(function (loadIndex, loadElement) {
                    // Re-index the load title
                    $(loadElement).find('.load-title').text('Load #' + (loadIndex + 1));

                    // Update the data-load-index attribute
                    $(loadElement).find('.products-container').attr('data-load-index', loadIndex);

                    // Re-index all form elements within this load
                    $(loadElement).find('input, select, textarea, span[data-valmsg-for]').each(function () {
                        var originalName = $(this).attr('name') || $(this).attr('data-valmsg-for');
                        if (originalName) {
                            // Correctly handle inputs with 'name' and validation spans with 'data-valmsg-for'
                            var newName = originalName.replace(/Loads\[\d+\]/, 'Loads[' + loadIndex + ']');
                            if ($(this).is('input') || $(this).is('select') || $(this).is('textarea')) {
                                $(this).attr('name', newName);
                                // For validation, also update the ID if it follows the convention
                                var originalId = $(this).attr('id');
                                if (originalId) {
                                    $(this).attr('id', newIdFromOldName(originalId, newName));
                                }
                            } else if ($(this).is('span')) { // Validation message span
                                $(this).attr('data-valmsg-for', newName);
                            }
                        }
                    });

                    // Re-index all products within this load
                    $(loadElement).find('.product-entry').each(function (productIndex, productElement) {
                        $(productElement).find('input, span[data-valmsg-for]').each(function () {
                            var originalName = $(this).attr('name') || $(this).attr('data-valmsg-for');
                            if (originalName) {
                                var newName = originalName
                                    .replace(/Loads\[\d+\]/, 'Loads[' + loadIndex + ']')
                                    .replace(/Products\[\d+\]/, 'Products[' + productIndex + ']');

                                if ($(this).is('input')) {
                                    $(this).attr('name', newName);
                                    var originalId = $(this).attr('id');
                                    if (originalId) {
                                        $(this).attr('id', newIdFromOldName(originalId, newName));
                                    }
                                } else if ($(this).is('span')) { // Validation message span
                                    $(this).attr('data-valmsg-for', newName);
                                }
                            }
                        });
                    });

                    // Re-enable client-side validation for newly added elements
                    var form = $(loadElement).closest('form');
                    form.removeData('validator');
                    form.removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse(form);
                });
            }

            // Helper to generate a new ID based on the new name, useful for validation
            function newIdFromOldName(oldId, newName) {
                // Example: Loads_0__Products_0__Name becomes Loads_1__Products_0__Name
                // Assuming ID follows name: Loads[0].Products[0].Name -> Loads_0__Products_0__Name
                return newName.replace(/\[/g, '_').replace(/\]/g, '__').replace(/\./g, '_');
            }


            // --- ADD PRODUCT to a specific load ---
            $(document).on('click', '.add-product-btn', function () {
                var productsContainer = $(this).prev('.products-container');
                var loadIndex = productsContainer.data('load-index');
                var productIndex = productsContainer.find('.product-entry').length;

                var newProductHtml = `
                <div class="row product-entry mb-2 align-items-center">
                    <div class="col-md-5">
                        <label>Product Name</label>
                        <input class="form-control" type="text" name="Loads[${loadIndex}].Products[${productIndex}].Name" placeholder="Product Name" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[${productIndex}].Name" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-3">
                        <label>Quantity</label>
                        <input class="form-control" type="number" name="Loads[${loadIndex}].Products[${productIndex}].Quantity" value="1" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[${productIndex}].Quantity" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-3">
                        <label>Weight</label>
                        <input class="form-control" type="number" name="Loads[${loadIndex}].Products[${productIndex}].Weight" value="0" placeholder="Weight" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[${productIndex}].Weight" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-1">
                        <label>&nbsp;</label>
                        <button type="button" class="btn btn-sm btn-outline-danger remove-product-btn">X</button>
                    </div>
                </div>`;

                productsContainer.append(newProductHtml);
                reindexAll(); // Reindex to ensure validation rules are picked up for new elements
            });

            // --- REMOVE PRODUCT from a load ---
            $(document).on('click', '.remove-product-btn', function () {
                $(this).closest('.product-entry').remove();
                reindexAll(); // Essential to re-index after removing a whole load
            });

            // --- ADD LOAD ---
            $("#add-load-btn").click(function () {
                var loadsContainer = $('#loads-container');
                var loadIndex = loadsContainer.find('.load-entry').length;

                var newLoadHtml = `
                <div class="card mb-3 load-entry">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="load-title mb-0">Load #${loadIndex + 1}</h5>
                        <button type="button" class="btn btn-sm btn-danger remove-load-btn">Remove Load</button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label>Start Location</label>
                                    <input class="form-control" type="text" name="Loads[${loadIndex}].StartLocation" placeholder="Start Location" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].StartLocation" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label>Destination</label>
                                    <input class="form-control" type="text" name="Loads[${loadIndex}].Destination" placeholder="Destination" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Destination" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <label>Transport Unit</label>
                            <select class="form-control" name="Loads[${loadIndex}].TransportUnitId">
                                <option value="">-- Select Transport Unit --</option>
                                ${transportUnitsOptionsHtml} @* <-- Use the generated HTML here! *@
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].TransportUnitId" data-valmsg-replace="true"></span>
                        </div>

                        <hr>

                        <h6>Products in this Load</h6>
                        <div class="products-container" data-load-index="${loadIndex}">

                            <div class="row product-entry mb-2 align-items-center">
                                <div class="col-md-5">
                                    <label>Product Name</label>
                                    <input class="form-control" type="text" name="Loads[${loadIndex}].Products[0].Name" placeholder="Product Name" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[0].Name" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-3">
                                    <label>Quantity</label>
                                    <input class="form-control" type="number" name="Loads[${loadIndex}].Products[0].Quantity" value="1" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[0].Quantity" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-3">
                                    <label>Weight</label>
                                    <input class="form-control" type="number" name="Loads[${loadIndex}].Products[0].Weight" value="0" placeholder="Weight" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Products[0].Weight" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-1">
                                    <label>&nbsp;</label>
                                    <button type="button" class="btn btn-sm btn-outline-danger remove-product-btn">X</button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-info add-product-btn mt-2">Add Product to this Load</button>
                    </div>
                </div>`;

                loadsContainer.append(newLoadHtml);
                reindexAll(); // Reindex everything after adding a new load
            });

            // --- REMOVE LOAD ---
            $(document).on('click', '.remove-load-btn', function () {
                $(this).closest('.load-entry').remove();
                reindexAll(); // Essential to re-index after removing a whole load
            });

            // Initial re-indexing when the page loads to ensure correct names if model has initial loads
            reindexAll();
        });
    </script>
}