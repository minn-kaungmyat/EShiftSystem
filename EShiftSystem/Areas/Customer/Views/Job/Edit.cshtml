@model EShiftSystem.ViewModels.JobCreateViewModel
@using EShiftSystem.Models.Enums
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Edit Job";
}

<div class="content-header"><h2>Edit Job</h2></div>

@if (Model.Status != JobStatus.Pending && Model.Status != JobStatus.Approved)
{
    <div class="alert alert-warning">
        This job cannot be edited because its status is @Model.Status. Only Pending and Approved jobs can be edited.
    </div>
    <a asp-action="Index" class="btn btn-primary">Back to List</a>
}
else
{
    <div class="step-indicator">
        <div class="step" data-step="1">
            <div class="step-number">1</div>
            <div class="step-label">Job Details</div>
        </div>
        <div class="step" data-step="2">
            <div class="step-number">2</div>
            <div class="step-label">Edit Loads</div>
        </div>
        <div class="step" data-step="3">
            <div class="step-number">3</div>
            <div class="step-label">Review & Submit</div>
        </div>
    </div>

    <form asp-action="Edit" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="JobId" />

        <div id="step-1" class="step-content active">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="JobTitle" class="control-label"></label>
                        <input asp-for="JobTitle" class="form-control" />
                        <span asp-validation-for="JobTitle" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Priority" class="control-label"></label>
                        <select asp-for="Priority" asp-items="Html.GetEnumSelectList<EShiftSystem.Models.Enums.JobPriority>()" class="form-control"></select>
                        <span asp-validation-for="Priority" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="JobDate" class="control-label"></label>
                        <input asp-for="JobDate" type="date" class="form-control" />
                        <span asp-validation-for="JobDate" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <div id="step-2" class="step-content">
            <div id="loads-container">
                @for (var i = 0; i < Model.Loads.Count; i++)
                {
                    <div class="card mb-3 load-entry">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="load-title mb-0">Load #@(i + 1)</h5>
                            @if (Model.Loads.Count > 1)
                            {
                                <button type="button" class="btn btn-sm btn-outline-danger remove-load-btn">X</button>
                            }
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label asp-for="Loads[i].StartLocation" class="control-label"></label>
                                        <input asp-for="Loads[i].StartLocation" class="form-control" />
                                        <span asp-validation-for="Loads[i].StartLocation" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label asp-for="Loads[i].Destination" class="control-label"></label>
                                        <input asp-for="Loads[i].Destination" class="form-control" />
                                        <span asp-validation-for="Loads[i].Destination" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="custom-divider">
                                <span class="divider-text">Items in this Load</span>
                            </div>
                            <div class="load-items-container" data-load-index="@i">
                                @for (var j = 0; j < Model.Loads[i].LoadItems.Count; j++)
                                {
                                    <div class="row load-item-entry align-items-center">
                                        <div class="col-md-5 form-group mb-3">
                                            <label asp-for="Loads[i].LoadItems[j].ItemType"></label>
                                            <input asp-for="Loads[i].LoadItems[j].ItemType" class="form-control" placeholder="e.g., Furniture, Boxes" />
                                            <span asp-validation-for="Loads[i].LoadItems[j].ItemType" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3 form-group mb-3">
                                            <label asp-for="Loads[i].LoadItems[j].Quantity"></label>
                                            <input asp-for="Loads[i].LoadItems[j].Quantity" class="form-control" type="number" />
                                            <span asp-validation-for="Loads[i].LoadItems[j].Quantity" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-3 form-group mb-3">
                                            <label asp-for="Loads[i].LoadItems[j].Note"></label>
                                            <input asp-for="Loads[i].LoadItems[j].Note" class="form-control" type="text" placeholder="e.g., Fragile, Heavy" />
                                            <span asp-validation-for="Loads[i].LoadItems[j].Note" class="text-danger"></span>
                                        </div>
                                        <div class="col-md-1">
                                            <label>&nbsp;</label>
                                            @if (Model.Loads[i].LoadItems.Count > 1)
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger remove-load-item-btn">X</button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <button type="button" class="btn add-load-item-btn btn-link text-decoration-none p-0" style="color: var(--primary)">
                                <i class="fas fa-plus"></i> Add Item
                            </button>
                        </div>
                    </div>
                }
            </div>
            <div class="mt-3 mb-4">
                <button id="add-load-btn" type="button" class="btn btn-link text-decoration-none p-0" style="color: var(--primary)">
                    <i class="fas fa-plus"></i> Add Load
                </button>
            </div>
        </div>

        <div id="step-3" class="step-content">
            <h4>Job Summary</h4>
            <div id="review-content">
            </div>
        </div>

        <div class="navigation-buttons">
            <button type="button" id="prevBtn" class="btn btn-outline">Back</button>
            <button type="button" id="cancelBtn" class="btn btn-outline" onclick="window.location.href='@Url.Action("Index")'">Cancel</button>
            <button type="button" id="nextBtn" class="btn btn-primary">Next</button>
            <button type="submit" id="submitBtn" class="btn btn-primary">Save Changes</button>
        </div>
    </form>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script>
            $(document).ready(function () {
                var currentStep = 1;
                var totalSteps = 3;

                const stepTitles = {
                    1: "Edit Loads",
                    2: "Review & Submit",
                    3: "Submit"
                };

                function showStep(stepNumber) {
                    $('.step-content').removeClass('active').hide();
                    $(`#step-${stepNumber}`).addClass('active').show();

                    $('.step-indicator .step').removeClass('active completed');
                    for (let i = 1; i <= totalSteps; i++) {
                        let stepElement = $(`.step-indicator .step[data-step="${i}"]`);
                        if (i < stepNumber) {
                            stepElement.addClass('completed');
                        } else if (i === stepNumber) {
                            stepElement.addClass('active');
                        }
                    }

                    // Show/hide navigation buttons based on step
                    if (stepNumber === 1) {
                        $('#prevBtn').hide();
                        $('#cancelBtn').show();
                    } else {
                        $('#prevBtn').show();
                        $('#cancelBtn').hide();
                    }
                    $('#nextBtn').toggle(stepNumber < totalSteps);
                    $('#submitBtn').toggle(stepNumber === totalSteps);

                    if (stepNumber < totalSteps) {
                        $('#nextBtn').text('Next: ' + stepTitles[stepNumber]);
                    }
                    reparseFormValidation();
                }

                function isValidStep(stepNumber) {
                    let isValid = true;
                    $(`#step-${stepNumber} input, #step-${stepNumber} select, #step-${stepNumber} textarea`).each(function () {
                        $(this).valid();
                        if (!$(this).valid()) {
                            isValid = false;
                        }
                    });
                    return isValid;
                }

                function reparseFormValidation() {
                    var form = $('form');
                    form.removeData('validator');
                    form.removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse(form);
                }

                function populateReviewStep() {
                    let reviewHtml = '<h5>Job Details</h5>';
                    reviewHtml += `<p><strong>Job Title:</strong> ${$('#JobTitle').val()}</p>`;
                    reviewHtml += `<p><strong>Job Date:</strong> ${$('#JobDate').val()}</p>`;
                    reviewHtml += `<p><strong>Description:</strong> ${$('#Description').val()}</p>`;
                    reviewHtml += `<p><strong>Priority:</strong> ${$('#Priority option:selected').text()}</p>`;

                    reviewHtml += '<hr><h5>Loads & Items</h5>';
                    if ($('#loads-container .load-entry').length === 0) {
                        reviewHtml += '<p>No loads added.</p>';
                    } else {
                        $('#loads-container .load-entry').each(function (loadIndex, loadElement) {
                            reviewHtml += `<div class="card mb-3"><div class="card-body">`;
                            reviewHtml += `<h6>Load #${loadIndex + 1}</h6>`;
                            reviewHtml += `<p><strong>Start Location:</strong> ${$(loadElement).find(`[name="Loads[${loadIndex}].StartLocation"]`).val()}</p>`;
                            reviewHtml += `<p><strong>Destination:</strong> ${$(loadElement).find(`[name="Loads[${loadIndex}].Destination"]`).val()}</p>`;

                            reviewHtml += `<h6>Items:</h6>`;
                            let itemCount = 0;
                            $(loadElement).find('.load-item-entry').each(function (itemIndex, itemElement) {
                                const itemType = $(itemElement).find(`[name="Loads[${loadIndex}].LoadItems[${itemIndex}].ItemType"]`).val();
                                const itemQuantity = $(itemElement).find(`[name="Loads[${loadIndex}].LoadItems[${itemIndex}].Quantity"]`).val();
                                const itemNote = $(itemElement).find(`[name="Loads[${loadIndex}].LoadItems[${itemIndex}].Note"]`).val();

                                if (itemType || itemQuantity || itemNote) {
                                    reviewHtml += `<p class="mb-0 ms-3">- <strong>${itemType}</strong> (Qty: ${itemQuantity}, Note: ${itemNote})</p>`;
                                    itemCount++;
                                }
                            });
                            if (itemCount === 0) {
                                reviewHtml += `<p class="mb-0 ms-3">No items specified for this load.</p>`;
                            }
                            reviewHtml += `</div></div>`;
                        });
                    }
                    $('#review-content').html(reviewHtml);
                }

                $('#nextBtn').click(function () {
                    if (isValidStep(currentStep)) {
                        currentStep++;
                        if (currentStep > totalSteps) {
                            currentStep = totalSteps;
                        }
                        if (currentStep === totalSteps) {
                            populateReviewStep();
                        }
                        showStep(currentStep);
                    }
                });

                $('#prevBtn').click(function () {
                    currentStep--;
                    if (currentStep < 1) {
                        currentStep = 1;
                    }
                    showStep(currentStep);
                });

                $('.step-indicator .step').click(function() {
                    let clickedStep = parseInt($(this).data('step'));
                    if (clickedStep < currentStep) {
                        currentStep = clickedStep;
                        showStep(currentStep);
                    } else if (clickedStep === currentStep) {
                    } else if (clickedStep > currentStep && isValidStep(currentStep)) {
                        currentStep = clickedStep;
                        if (currentStep === totalSteps) {
                            populateReviewStep();
                        }
                        showStep(currentStep);
                    }
                });

                function reindexAll() {
                    // First remove validation data
                    $('.load-entry input, .load-entry select').each(function() {
                        $(this).removeData("validator").removeData("unobtrusiveValidation");
                    });

                    $('.load-entry').each(function (loadIndex, loadElement) {
                        $(loadElement).find('.load-title').text('Load #' + (loadIndex + 1));
                        $(loadElement).find('.load-items-container').attr('data-load-index', loadIndex);

                        $(loadElement).find('input, select, textarea, span[data-valmsg-for]').each(function () {
                            var originalName = $(this).attr('name') || $(this).attr('data-valmsg-for');
                            if (originalName) {
                                var newName = originalName.replace(/Loads\[\d+\]/, 'Loads[' + loadIndex + ']');
                                if ($(this).is('input') || $(this).is('select') || $(this).is('textarea')) {
                                    $(this).attr('name', newName);
                                    var originalId = $(this).attr('id');
                                    if (originalId) {
                                        var newId = newIdFromOldName(originalId, newName);
                                        $(this).attr('id', newId);
                                    }
                                } else if ($(this).is('span')) {
                                    $(this).attr('data-valmsg-for', newName);
                                }
                            }
                        });

                        $(loadElement).find('.load-item-entry').each(function (itemIndex, itemElement) {
                            $(itemElement).find('input, span[data-valmsg-for]').each(function () {
                                var originalName = $(this).attr('name') || $(this).attr('data-valmsg-for');
                                if (originalName) {
                                    var newName = originalName
                                        .replace(/Loads\[\d+\]/, 'Loads[' + loadIndex + ']')
                                        .replace(/LoadItems\[\d+\]/, 'LoadItems[' + itemIndex + ']');

                                    if ($(this).is('input')) {
                                        $(this).attr('name', newName);
                                        var originalId = $(this).attr('id');
                                        if (originalId) {
                                            var newId = newIdFromOldName(originalId, newName);
                                            $(this).attr('id', newId);
                                        }
                                    } else if ($(this).is('span')) {
                                        $(this).attr('data-valmsg-for', newName);
                                    }
                                }
                            });
                        });
                    });

                    // Reparse validation on the entire form
                    var form = $('form');
                    form.removeData("validator");
                    form.removeData("unobtrusiveValidation");
                    $.validator.unobtrusive.parse(form);
                }

                function newIdFromOldName(oldId, newName) {
                    return newName.replace(/\[/g, '_').replace(/\]/g, '__').replace(/\./g, '_');
                }

                function updateRemoveButtons() {
                    // Update load remove buttons
                    $('.load-entry').each(function() {
                        const removeBtn = $(this).find('.remove-load-btn');
                        if ($('.load-entry').length > 1) {
                            if (removeBtn.length === 0) {
                                $(this).find('.card-header').append('<button type="button" class="btn btn-sm btn-outline-danger remove-load-btn">X</button>');
                            }
                        } else {
                            removeBtn.remove();
                        }
                    });

                    // Update item remove buttons
                    $('.load-items-container').each(function() {
                        const items = $(this).find('.load-item-entry');
                        items.each(function() {
                            const removeBtn = $(this).find('.remove-load-item-btn');
                            if (items.length > 1) {
                                if (removeBtn.length === 0) {
                                    $(this).find('.col-md-1').append('<button type="button" class="btn btn-sm btn-outline-danger remove-load-item-btn">X</button>');
                                }
                            } else {
                                removeBtn.remove();
                            }
                        });
                    });
                }

                $(document).on('click', '.add-load-item-btn', function () {
                    var loadItemsContainer = $(this).prev('.load-items-container');
                    var loadIndex = loadItemsContainer.data('load-index');
                    var itemIndex = loadItemsContainer.find('.load-item-entry').length;

                    var newLoadItemHtml = `
                    <div class="row load-item-entry align-items-center">
                        <div class="col-md-5 form-group mb-3">
                            <label>Item Type</label>
                            <input class="form-control" type="text" name="Loads[${loadIndex}].LoadItems[${itemIndex}].ItemType" data-val="true" data-val-required="The Item Type field is required" placeholder="e.g., Furniture, Boxes" />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[${itemIndex}].ItemType" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-3 form-group mb-3">
                            <label>Quantity</label>
                            <input class="form-control" type="number" name="Loads[${loadIndex}].LoadItems[${itemIndex}].Quantity" data-val="true" data-val-required="The Quantity field is required" data-val-number="The field Quantity must be a number" value="1" />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[${itemIndex}].Quantity" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-3 form-group mb-3">
                            <label>Note</label>
                            <input class="form-control" type="text" name="Loads[${loadIndex}].LoadItems[${itemIndex}].Note" placeholder="e.g., Fragile, Heavy" />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[${itemIndex}].Note" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-1">
                            <label>&nbsp;</label>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-load-item-btn">X</button>
                        </div>
                    </div>`;

                    loadItemsContainer.append(newLoadItemHtml);
                    reindexAll();
                    updateRemoveButtons();
                });

                $(document).on('click', '.remove-load-item-btn', function () {
                    const loadItemsContainer = $(this).closest('.load-items-container');
                    if (loadItemsContainer.find('.load-item-entry').length > 1) {
                        $(this).closest('.load-item-entry').remove();
                        reindexAll();
                        updateRemoveButtons();
                    }
                });

                $("#add-load-btn").click(function () {
                    var loadsContainer = $('#loads-container');
                    var loadIndex = loadsContainer.find('.load-entry').length;

                    var newLoadHtml = `
                    <div class="card mb-3 load-entry">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="load-title mb-0">Load #${loadIndex + 1}</h5>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-load-btn">X</button>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label>Start Location</label>
                                        <input class="form-control" type="text" name="Loads[${loadIndex}].StartLocation" data-val="true" data-val-required="The Start Location field is required" placeholder="Start Location" />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].StartLocation" data-valmsg-replace="true"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label>Destination</label>
                                        <input class="form-control" type="text" name="Loads[${loadIndex}].Destination" data-val="true" data-val-required="The Destination field is required" placeholder="Destination" />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].Destination" data-valmsg-replace="true"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="custom-divider">
                                <span class="divider-text">Items in this Load</span>
                            </div>
                            <div class="load-items-container" data-load-index="${loadIndex}">
                                <div class="row load-item-entry align-items-center">
                                    <div class="col-md-5 form-group mb-3">
                                        <label>Item Type</label>
                                        <input class="form-control" type="text" name="Loads[${loadIndex}].LoadItems[0].ItemType" data-val="true" data-val-required="The Item Type field is required" placeholder="e.g., Furniture, Boxes" />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[0].ItemType" data-valmsg-replace="true"></span>
                                    </div>
                                    <div class="col-md-3 form-group mb-3">
                                        <label>Quantity</label>
                                        <input class="form-control" type="number" name="Loads[${loadIndex}].LoadItems[0].Quantity" data-val="true" data-val-required="The Quantity field is required" data-val-number="The field Quantity must be a number" value="1" />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[0].Quantity" data-valmsg-replace="true"></span>
                                    </div>
                                    <div class="col-md-3 form-group mb-3">
                                        <label>Note</label>
                                        <input class="form-control" type="text" name="Loads[${loadIndex}].LoadItems[0].Note" placeholder="e.g., Fragile, Heavy" />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Loads[${loadIndex}].LoadItems[0].Note" data-valmsg-replace="true"></span>
                                    </div>
                                    <div class="col-md-1">
                                        <label>&nbsp;</label>
                                        <button type="button" class="btn btn-sm btn-outline-danger remove-load-item-btn">X</button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn add-load-item-btn btn-link text-decoration-none p-0" style="color: var(--primary)">
                                <i class="fas fa-plus"></i> Add Item
                            </button>
                        </div>
                    </div>`;

                    loadsContainer.append(newLoadHtml);
                    reindexAll();
                    updateRemoveButtons();
                });

                $(document).on('click', '.remove-load-btn', function () {
                    if ($('.load-entry').length > 1) {
                        $(this).closest('.load-entry').remove();
                        reindexAll();
                        updateRemoveButtons();
                    }
                });

                showStep(currentStep);
                reindexAll();
                updateRemoveButtons();
            });
        </script>
    }
} 